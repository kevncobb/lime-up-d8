<?php

// Add your custom theme override functions here.

/**
 * Implements hook_preprocess_block()
 */
function limestone_preprocess_block(&$variables) {
}

/**
 * Implements template_preprocess_field().
 */
function limestone_preprocess_field(&$variables, $hook) {
  $variables['nodenid'] = \Drupal::routeMatch()->getRawParameter('node');
}

/**
 * Implements template_preprocess_html().
 *
 * Adds additional classes
 */
function limestone_preprocess_html(&$variables) {
}

/**
 * Implements template_preprocess_node
 *
 * Add template suggestions and classes
 */
function limestone_preprocess_node(&$variables) {
}

/**
 * Implements template_preprocess_page
 *
 * Add convenience variables and template suggestions
 */
function limestone_preprocess_page(&$variables) {

  /*
   // How to make a field available in page.html.twig
  if ( $variables['node'] ) {
      $node = $variables['node'];
      // Get Sub Header value and make available for page.html.twig

      $field_header_background_image = $node->get('field_header_background_image')->processed;
      $variables['field_header_background_image'] = $field_header_background_image;

  }
*/

  if(isset($variables['node'])) {

    $variables['title'] = $variables['node']->title->value;
    $variables['field_header_background_image'] = $variables['node']->field_header_background_image->processed;
    $variables['bg_image_url'] = $variables['node']->field_header_background_image->field_target_entity->field_media_image->entity->getFileUri();

  }else{
    $variables['title'] =$variables['page']['#title'];
    $variables['field_header_background_image'] = $variables['page']->field_header_background_image->processed;
    $variables['bg_image_url'] = file_create_url($variables['node']->field_media->field_target_entity->field_header_background_image->entity->getFileUri());
  }
  /*
  if($variables['is_front']){
      $variables['#attached']['library'][] = 'lc/custom-library';
  }
  */
}
/**
 * Implements template_preprocess_views_view().
 */
function limestone_preprocess_views_view(&$variables) {}


function limestone_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Add content type suggestions.
  if ($node = \Drupal::request()->attributes->get('node')) {
    array_splice($suggestions, 1, 0, 'page__node__' . $node->getType());
  }
}

/**
 * Implements hook__suggestions_HOOK_alter().
 */
function limestone_theme_suggestions_block_alter(array &$suggestions, array $variables) {
  // Add theme suggestions to blocks based on region.
  if (!empty($variables['elements']['#id'])) {
    $block = Drupal\block\Entity\Block::load($variables['elements']['#id']);
    $suggestions[] = 'block__' . $block->getRegion();
    $suggestions[] = 'block__' . $block->getRegion() . '__' . $variables['elements']['#id'];
  }
  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function limestone_theme_suggestions_image_formatter_alter(array &$suggestions, array $variables) {
  $entity = $variables['item']->getEntity();
  $field_name = $variables['item']->getParent()->getName();
  $suggestions[] = 'image_formatter__' . $entity->getEntityTypeId() . '__' . $entity->bundle() . '__' . $field_name;
}

function limestone_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  switch ($hook) {
    case 'image_formatter':

      /**
       * @var Drupal\url_image\Plugin\Field\FieldType\UrlImageItem $item
       */
      $item = $variables['item'];
      $config = $item->getFieldDefinition();
      switch ($config->getTargetBundle()) {
        case 'b_partner_images':
          $suggestions[] = 'image_formatter__b_partner_images';
          break;
      }
      break;
  }
}