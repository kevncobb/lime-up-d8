diff --git a/src/Plugin/DataType/EntityReferenceRevisions.php b/src/Plugin/DataType/EntityReferenceRevisions.php
index b24b6b10765f..228a2979f0eb 100644
--- a/src/Plugin/DataType/EntityReferenceRevisions.php
+++ b/src/Plugin/DataType/EntityReferenceRevisions.php
@@ -4,6 +4,7 @@ namespace Drupal\entity_reference_revisions\Plugin\DataType;
 
 use Drupal\Core\Entity\EntityInterface;
 use Drupal\Core\Entity\Plugin\DataType\EntityReference;
+use Drupal\Core\TypedData\TypedDataInterface;
 
 /**
  * Defines an 'entity_reference_revisions' data type.
@@ -47,6 +48,18 @@ class EntityReferenceRevisions extends EntityReference {
    */
   protected $id;
 
+  /**
+   * The entity storage service for this field's target entity type.
+   *
+   * @var \Drupal\Core\Entity\EntityStorageInterface
+   */
+  protected $entityStorage;
+
+  public function __construct($definition, $name, TypedDataInterface $parent) {
+    parent::__construct($definition, $name, $parent);
+    $this->entityStorage = \Drupal::entityTypeManager()->getStorage($this->getTargetDefinition()->getEntityTypeId());
+  }
+
   /**
    * Returns the definition of the referenced entity.
    *
@@ -73,12 +86,11 @@ class EntityReferenceRevisions extends EntityReference {
    */
   public function getTarget() {
     if (!isset($this->target) && isset($this->revision_id)) {
-      $storage = \Drupal::entityTypeManager()->getStorage($this->getTargetDefinition()->getEntityTypeId());
       // By default always load the default revision, so caches get used.
-      $entity = $storage->load($this->id);
+      $entity = $this->entityStorage->load($this->id);
       if ($entity !== NULL && $entity->getRevisionId() != $this->revision_id) {
         // A non-default revision is a referenced, so load this one.
-        $entity = $storage->loadRevision($this->revision_id);
+        $entity = $this->entityStorage->loadRevision($this->revision_id);
       }
       $this->target = isset($entity) ? $entity->getTypedData() : NULL;
     }
@@ -113,6 +125,12 @@ class EntityReferenceRevisions extends EntityReference {
     elseif (is_object($value) && $value instanceof EntityInterface) {
       $this->target = $value->getTypedData();
     }
+    elseif (is_scalar($value)) {
+      if ($entity = $this->entityStorage->load($value)) {
+        $this->id = $entity->id();
+        $this->revision_id = $entity->getRevisionId();
+      }
+    }
     elseif (!is_scalar($value['target_id']) || !is_scalar($value['target_revision_id']) || $this->getTargetDefinition()->getEntityTypeId() === NULL) {
       throw new \InvalidArgumentException('Value is not a valid entity.');
     }
diff --git a/tests/src/Kernel/EntityReferenceRevisionsSaveTest.php b/tests/src/Kernel/EntityReferenceRevisionsSaveTest.php
index 2b66a63058d9..c15cf5fa11d8 100644
--- a/tests/src/Kernel/EntityReferenceRevisionsSaveTest.php
+++ b/tests/src/Kernel/EntityReferenceRevisionsSaveTest.php
@@ -3,11 +3,10 @@
 namespace Drupal\Tests\entity_reference_revisions\Kernel;
 
 use Drupal\entity_composite_relationship_test\Entity\EntityTestCompositeRelationship;
-use Drupal\field\Entity\FieldConfig;
-use Drupal\field\Entity\FieldStorageConfig;
 use Drupal\KernelTests\KernelTestBase;
 use Drupal\node\Entity\Node;
 use Drupal\node\Entity\NodeType;
+use Drupal\Tests\entity_reference_revisions\Traits\EntityReferenceRevisionsTrait;
 
 /**
  * Tests the entity_reference_revisions NeedsSaveInterface.
@@ -16,6 +15,8 @@ use Drupal\node\Entity\NodeType;
  */
 class EntityReferenceRevisionsSaveTest extends KernelTestBase {
 
+  use EntityReferenceRevisionsTrait;
+
   /**
    * Modules to enable.
    *
@@ -52,22 +53,7 @@ class EntityReferenceRevisionsSaveTest extends KernelTestBase {
    * Tests that the referenced entity is saved when needsSave() is TRUE.
    */
   public function testNeedsSave() {
-
-    // Add the entity_reference_revisions field to article.
-    $field_storage = FieldStorageConfig::create(array(
-      'field_name' => 'composite_reference',
-      'entity_type' => 'node',
-      'type' => 'entity_reference_revisions',
-      'settings' => array(
-        'target_type' => 'entity_test_composite'
-      ),
-    ));
-    $field_storage->save();
-    $field = FieldConfig::create(array(
-      'field_storage' => $field_storage,
-      'bundle' => 'article',
-    ));
-    $field->save();
+    $this->generateEntityReferenceRevisionField('node', 'entity_test_composite', 'article');
 
     $text = 'Dummy text';
     // Create the test composite entity.
@@ -86,15 +72,17 @@ class EntityReferenceRevisionsSaveTest extends KernelTestBase {
     $node = Node::create([
       'title' => $this->randomMachineName(),
       'type' => 'article',
-      'composite_reference' => $entity_test,
+      'entity_reference_revisions' => $entity_test,
     ]);
+
     // Check the name is properly set and that getValue() returns the entity
     // when it is marked as needs save."
-    $values = $node->composite_reference->getValue();
+    $values = $node->entity_reference_revisions->getValue();
     $this->assertTrue(isset($values[0]['entity']));
     static::assertEquals($values[0]['entity']->name->value, $text);
-    $node->composite_reference->setValue($values);
-    static::assertEquals($node->composite_reference->entity->name->value, $text);
+    $node->entity_reference_revisions->setValue($values);
+    static::assertEquals($node->entity_reference_revisions->entity->name->value, $text);
+
     $node->save();
 
     // Check that the name has been updated when the parent has been saved.
@@ -110,9 +98,9 @@ class EntityReferenceRevisionsSaveTest extends KernelTestBase {
     // Load the Node and check the composite reference entity is not returned
     // from getValue() if it is not marked as needs saving.
     $node = Node::load($node->id());
-    $values = $node->composite_reference->getValue();
+    $values = $node->entity_reference_revisions->getValue();
     $this->assertFalse(isset($values[0]['entity']));
-    $node->composite_reference = $entity_test_after;
+    $node->entity_reference_revisions = $entity_test_after;
     $node->save();
 
     // Check the name is not updated.
@@ -143,20 +131,7 @@ class EntityReferenceRevisionsSaveTest extends KernelTestBase {
    */
   public function testSaveNewEntity() {
     // Add the entity_reference_revisions field to article.
-    $field_storage = FieldStorageConfig::create(array(
-      'field_name' => 'composite_reference',
-      'entity_type' => 'node',
-      'type' => 'entity_reference_revisions',
-      'settings' => array(
-        'target_type' => 'entity_test_composite'
-      ),
-    ));
-    $field_storage->save();
-    $field = FieldConfig::create(array(
-      'field_storage' => $field_storage,
-      'bundle' => 'article',
-    ));
-    $field->save();
+    $this->generateEntityReferenceRevisionField('node', 'entity_test_composite', 'article');
 
     $text = 'Dummy text';
     // Create the test entity.
@@ -169,7 +144,7 @@ class EntityReferenceRevisionsSaveTest extends KernelTestBase {
     $node = Node::create([
       'title' => $this->randomMachineName(),
       'type' => 'article',
-      'composite_reference' => $entity_test,
+      'entity_reference_revisions' => $entity_test,
     ]);
     $validate = $node->validate();
     $this->assertEmpty($validate);
@@ -177,8 +152,8 @@ class EntityReferenceRevisionsSaveTest extends KernelTestBase {
 
     // Test that the fields on node are properly set.
     $node_after = Node::load($node->id());
-    static::assertEquals($node_after->composite_reference[0]->target_id, $entity_test->id());
-    static::assertEquals($node_after->composite_reference[0]->target_revision_id, $entity_test->getRevisionId());
+    static::assertEquals($node_after->entity_reference_revisions[0]->target_id, $entity_test->id());
+    static::assertEquals($node_after->entity_reference_revisions[0]->target_revision_id, $entity_test->getRevisionId());
     // Check that the entity is not new after save parent.
     $this->assertFalse($entity_test->isNew());
 
@@ -191,16 +166,18 @@ class EntityReferenceRevisionsSaveTest extends KernelTestBase {
     $second_entity_test->save();
 
     // Set the new test entity to the node field.
-    $node_after->composite_reference = $second_entity_test;
+    $node_after->entity_reference_revisions = $second_entity_test;
     // Check the fields have been updated.
-    static::assertEquals($node_after->composite_reference[0]->target_id, $second_entity_test->id());
-    static::assertEquals($node_after->composite_reference[0]->target_revision_id, $second_entity_test->getRevisionId());
+    static::assertEquals($node_after->entity_reference_revisions[0]->target_id, $second_entity_test->id());
+    static::assertEquals($node_after->entity_reference_revisions[0]->target_revision_id, $second_entity_test->getRevisionId());
   }
 
   /**
    * Tests entity_reference_revisions default value and config dependencies.
    */
   public function testEntityReferenceRevisionsDefaultValue() {
+    // Create an entity reference field to reference to the test target node.
+    $field = $this->generateEntityReferenceRevisionField();
 
     // Create a test target node used as entity reference by another test node.
     $node_target = Node::create([
@@ -211,21 +188,11 @@ class EntityReferenceRevisionsSaveTest extends KernelTestBase {
     ]);
     $node_target->save();
 
-    // Create an entity reference field to reference to the test target node.
-    /** @var \Drupal\field\Entity\FieldStorageConfig $field_storage */
-    $field_storage = FieldStorageConfig::create([
-      'field_name' => 'target_node_reference',
-      'entity_type' => 'node',
-      'type' => 'entity_reference_revisions',
-      'settings' => ['target_type' => 'node'],
-    ]);
-    $field_storage->save();
-    /** @var \Drupal\field\Entity\FieldConfig $field */
-    $field = FieldConfig::create([
-      'field_storage' => $field_storage,
-      'bundle' => 'article',
+    $field->setSettings([
       'required' => FALSE,
-      'settings' => ['handler_settings' => ['target_bundles' => ['article' => 'article']]],
+      'handler_settings' => [
+        'target_bundles' => ['article' => 'article'],
+      ]
     ]);
     // Add reference values to field config that will be used as default value.
     $default_value = [
@@ -250,19 +217,19 @@ class EntityReferenceRevisionsSaveTest extends KernelTestBase {
       'title' => 'Host node',
       'type' => 'article',
       'body' => 'Host body text',
-      'target_node_reference' => $node_target,
+      'entity_reference_revisions' => $node_target,
     ]);
     $node_host->save();
 
     // Check if the ERR default values are properly created.
     $node_host_after = Node::load($node_host->id());
-    $this->assertEquals($node_host_after->target_node_reference->target_id, $node_target->id());
-    $this->assertEquals($node_host_after->target_node_reference->target_revision_id, $revision_id);
+    $this->assertEquals($node_host_after->entity_reference_revisions->target_id, $node_target->id());
+    $this->assertEquals($node_host_after->entity_reference_revisions->target_revision_id, $revision_id);
 
     // Check if the configuration dependencies are properly created.
     $dependencies = $field->calculateDependencies()->getDependencies();
     $this->assertEquals($dependencies['content'][0], 'node:article:2d04c2b4-9c3d-4fa6-869e-ecb6fa5c9410');
-    $this->assertEquals($dependencies['config'][0], 'field.storage.node.target_node_reference');
+    $this->assertEquals($dependencies['config'][0], 'field.storage.node.entity_reference_revisions');
     $this->assertEquals($dependencies['config'][1], 'node.type.article');
     $this->assertEquals($dependencies['module'][0], 'entity_reference_revisions');
   }
@@ -271,20 +238,7 @@ class EntityReferenceRevisionsSaveTest extends KernelTestBase {
    * Tests FieldType\EntityReferenceRevisionsItem::deleteRevision
    */
   public function testEntityReferenceRevisionsDeleteHandleDeletedChild() {
-    $field_storage = FieldStorageConfig::create([
-      'field_name' => 'field_reference',
-      'entity_type' => 'node',
-      'type' => 'entity_reference_revisions',
-      'settings' => [
-        'target_type' => 'node',
-      ],
-    ]);
-    $field_storage->save();
-    $field = FieldConfig::create([
-      'field_storage' => $field_storage,
-      'bundle' => 'article',
-    ]);
-    $field->save();
+    $this->generateEntityReferenceRevisionField();
 
     $child = Node::create([
       'type' => 'article',
@@ -295,11 +249,11 @@ class EntityReferenceRevisionsSaveTest extends KernelTestBase {
     $node = Node::create([
       'type' => 'article',
       'title' => 'Parent node',
-      'field_reference' => [
+      'entity_reference_revisions' => [
         [
           'target_id' => $child->id(),
           'target_revision_id' => $child->getRevisionId(),
-        ]
+        ],
       ],
     ]);
 
@@ -318,4 +272,27 @@ class EntityReferenceRevisionsSaveTest extends KernelTestBase {
     \Drupal::entityTypeManager()->getStorage('node')->deleteRevision($revisionId);
   }
 
+  /**
+   * Tests that a scalar value can be passed as a reference.
+   */
+  public function testScalarValueTargetId() {
+    $this->generateEntityReferenceRevisionField();
+
+    $child = Node::create(['type' => 'article', 'title' => 'Child node']);
+    $child->save();
+
+    $node = Node::create([
+      'type' => 'article',
+      'title' => 'Parent node',
+      'entity_reference_revisions' => $child->id(),
+    ]);
+
+    $node->save();
+    $this->assertEquals($node->entity_reference_revisions->first()->getValue(), [
+      'target_id' => $child->id(),
+      'target_revision_id' => $child->getRevisionId(),
+    ]);
+    $this->assertEquals($node->entity_reference_revisions->first()->entity->id(), $child->id());
+  }
+
 }
diff --git a/tests/src/Traits/EntityReferenceRevisionsTrait.php b/tests/src/Traits/EntityReferenceRevisionsTrait.php
new file mode 100644
index 000000000000..ef20d3af22a2
--- /dev/null
+++ b/tests/src/Traits/EntityReferenceRevisionsTrait.php
@@ -0,0 +1,48 @@
+<?php
+
+declare(strict_types = 1);
+
+namespace Drupal\Tests\entity_reference_revisions\Traits;
+
+use Drupal\field\Entity\FieldConfig;
+use Drupal\field\Entity\FieldStorageConfig;
+
+/**
+ * Helper methods for the entity_reference_revisions module tests.
+ */
+trait EntityReferenceRevisionsTrait {
+
+  /**
+   * Generates and returns an entity_reference_revisions field storage.
+   *
+   * @param string $entity_type
+   *   (optional) The target entity type of the field storage. Defaults to
+   *   'node'.
+   * @param string $target_entity_type_id
+   *   (optional) The referenced target entity type id. Defaults to 'node'.
+   * @param string $target_bundle
+   *   (optional) The referenced target bundle. Defaults to 'article'.
+   *
+   * @return \Drupal\field\Entity\FieldConfig
+   *   The field storage config entity.
+   */
+  protected function generateEntityReferenceRevisionField(string $entity_type = 'node', string $target_entity_type_id = 'node', string $target_bundle = 'article') {
+    $field_storage = FieldStorageConfig::create([
+      'field_name' => 'entity_reference_revisions',
+      'entity_type' => $entity_type,
+      'type' => 'entity_reference_revisions',
+      'settings' => [
+        'target_type' => $target_entity_type_id,
+      ],
+    ]);
+    $field_storage->save();
+
+    $field = FieldConfig::create([
+      'field_storage' => $field_storage,
+      'bundle' => $target_bundle,
+    ]);
+    $field->save();
+    return $field;
+  }
+
+}
